#!/bin/bash

# Copyright 2025 Evan A. Edwards <evan@cheshirehall.net>
#
# https://github.com/EvanEdwards/recompress
# This script is licensed under the MIT License.
# 
# See --help for assistance


# Defaults
speedFactor="slower"  # Slower is higher quality
qualityFactor=26      # Lower is higher quality, 18-35
optForceEncode=""
optMaxHeight=1080
optMaxWidth=1920

# Calculated
printf -v cpuCount '%d' "$(grep -c ^processor /proc/cpuinfo)"
cpuCountHalf=$(( cpuCount / 2 ))

# Documentation
read -r -d '' manPage <<MANPAGE
% RECOMPRESS(1) User Commands
%
% April 2025

# NAME

recompress - Recompress video files to x265 10-bit format

# SYNOPSIS

**recompress** [*OPTIONS*] FILE...

# DESCRIPTION

**recompress** is a utility for recompressing video files to the x265 (HEVC) codec with 10-bit color depth. It automatically detects system resources and optimizes encoding for performance while maintaining quality.

The script checks if files are already in HEVC format and skips them unless forced. By default, processed files are saved to the "_recompressed" directory.

# OPTIONS

**-f, --force**
: Force encoding even if the file is already in HEVC format.

**-q, --quality** *VALUE*
: Set the CRF quality value (18-35, lower is higher quality). Default is 26.

**-s, --speed** *PRESET*
: Set the encoding speed preset. Options include: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow. Default is "slower".

**-x, --width** *WIDTH*
: Set the maximum width for output videos. Videos wider than this will be scaled down while preserving aspect ratio. Default is 1920.

**-y, --height** *HEIGHT*
: Set the maximum height for output videos. Videos taller than this will be scaled down while preserving aspect ratio. Default is 1080.

**-h, --help**
: Display this help information.

**-M, --installmanpage**
: Install the manpage to your local user manpage directory.

**--, --**
: Signal the end of options; treat all subsequent arguments as files.

# EXAMPLES

Recompress a single video file:

    recompress video.mp4

Recompress multiple video files:

    recompress video1.mp4 video2.mp4 video3.mp4

Force recompression of already HEVC encoded files:

    recompress -f video.mp4

Set custom quality (lower values = higher quality) and speed preset:

    recompress -q 22 -s medium video.mp4

Limit resolution to 720p:

    recompress -x 1280 -y 720 video.mp4

# OUTPUT

Processed files are saved to the "_recompressed" directory in the current working directory. The script creates this directory if it doesn't exist.

# NOTES

- The script automatically utilizes all available CPU cores for encoding
- Audio, chapters, subtitles, and other streams are preserved in the output file
- Videos exceeding the maximum resolution (default 1920x1080) are scaled down while preserving aspect ratio
- The script skips files that are already in HEVC format unless -f/--force is used

# EXIT STATUS

**0**
: Successful completion

**1**
: Error occurred (missing dependencies, invalid options, etc.)

# DEPENDENCIES

- ffmpeg
- ffprobe
- pandoc (for help display and manpage installation)
- h2 utility (for formatted output)

# BUGS

Report bugs to the script maintainer.

# COPYRIGHT

Copyright 2025 Evan A. Edwards
MIT License

# SEE ALSO

**ffmpeg**(1), **ffprobe**(1)
MANPAGE


function warn     { printf --   '- \e[43;30m[!]\e[0m\e[33m WARNING: \e[0m\e[1m %s\e[0m\n' "$*" ; }
function err      { printf -- '- \e[41;37;1m[×]\e[0m\e[31m  ERROR:  \e[0m\e[1m %s\e[0m\n' "$*" ; exit 1 ; }
function checkoff { printf -- '- \e[42m[✓]\e[0m %s\e[K\n' "$*" ; }

# Check for required dependencies
command -v ffmpeg >/dev/null 2>&1 || err "ffmpeg not found. Please install it."
command -v ffprobe >/dev/null 2>&1 || err "ffprobe not found. Please install it."
command -v pandoc >/dev/null 2>&1 || err "pandoc not found. Please install it for help pages."
command -v h2 >/dev/null 2>&1 || err "h2 (part of the h1 package) not found. Please install it for formatting output."


# Argument Handling

## No args?  Usage
[ $# -eq 0 ] && {
  echo "Usage: $( basename "$0" ) [OPTIONS] FILE..."
  echo "Use -h or --help for more information."
  exit 1
}

## Parse options
while [ "${1:0:1}" == "-" ] ; do
  case "${1:1}" in
    f|-force)     optForceEncode=1 ;;
    q|-quality)   shift
                  printf -v qualityFactor '%d' "$1"
                  [ $qualityFactor -ge 18 ] || err "Invalid quality (18-35)"
                  [ $qualityFactor -le 35 ] || err "Invalid quality (18-35)"
                  ;;
    s|-speed)     shift
                  case "$1" in
                    ultrafast|superfast|veryfast|faster|fast|medium|slow|slower|veryslow)
                      speedFactor="$1" ;;
                    *) err "Invalid speed preset. Choose from: ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow" ;;
                  esac
                  ;;
    x|-width)     shift
                  printf -v optMaxWidth '%d' "$1"
                  [ $optMaxWidth -ge 100 ] || err "Invalid width: must be an integer over 100"
                  ;;
    y|-height)    shift
                  printf -v optMaxHeight '%d' "$1"
                  [ $optMaxHeight -ge 50 ] || err "Invalid height: must be an integer over 50"
                  ;;
    h|-help)      echo "$manPage" | pandoc -s -f markdown -t man | man -l -
                  exit ;;
    M|-installmanpage)
                  mandir="$HOME/.local/share/man/man1/"
                  echo "$manPage" | pandoc -s -f markdown -t man -o "$mandir/recompress.1"
                  exit ;;
    -)            shift ; break ;;
    *)            err "Unknown option '${1}'" ;;
  esac
  shift
done

for FN in "$@" ; do
  [ -f "$FN" ] || continue
  BN="$(basename "$FN" )"
  OF="_recompressed/_working/$( basename "${FN}" )"

  #OF="_recompressed/_working/$( basename "${FN}" .mp4 ).mkv"

  if [ -z $optForceEncode ] ; then
    ffprobe "$FN" 2>&1 | grep -q "Stream #.*: Video" || { warn "Not a video file: '${FN}'" ; continue ; }
    ffprobe -v error -select_streams v:0 -show_entries stream=codec_name -of default=noprint_wrappers=1:nokey=1 "$FN" \
      | grep -q "hevc" && { checkoff "${BN} (already x265)" ; continue ; }
  fi


  h2 "$OF"

  # Check resolution and set scaling options
  scaling=""
  videoInfo="$(ffprobe -v error -select_streams v:0 -show_entries stream=width,height -of csv=p=0 "$FN")"
  printf -v width  '%d' "$(echo $videoInfo | cut -d',' -f1)"
  printf -v height '%d' "$(echo $videoInfo | cut -d',' -f2)"

  if [ $width -gt $optMaxWidth ] || [ $height -gt $optMaxHeight ]; then
    # Use the scale filter with the "less than" syntax to maintain aspect ratio
    # while ensuring neither dimension exceeds the target
    scaling="-vf scale=w=${optMaxWidth}:h=${optMaxHeight}:force_original_aspect_ratio=decrease"
    checkoff "Scaling down from ${width}x${height} to fit within ${optMaxWidth}x${optMaxHeight}"
  fi

  # Engage in actually recompressing the file.

  mkdir -p "_recompressed/_working" || err "Can not create working directory."

  frameCount=$(ffprobe -v error -select_streams v:0 -count_packets -show_entries stream=nb_read_packets -of csv=p=0 "$FN")
  printf "frame=%05s (total in source)  Original ${width}x${height}\n" "${frameCount}"

  ffmpeg -i "${FN}" \
    -v warning -stats \
    $scaling \
    -map 0 \
    -c:v libx265 -threads 0 \
    -x265-params log-level=error:pools=$cpuCount:frame-threads=$cpuCountHalf \
    -pix_fmt yuv420p10le -crf ${qualityFactor} -preset "${speedFactor}" \
    -tag:v hvc1 \
    -c:a copy -c:s copy -c:d copy -c:t copy -map_metadata 0 -map_chapters 0 \
    "${OF}" || rm -f "${OF}"
  [ -f "${OF}" ] && {
    mv "${OF}" _recompressed/.
  }

  # Just try to clean up if possible, but don't worry about errors.
  rmdir _recompressed/_working _recompressed &>/dev/null

done
